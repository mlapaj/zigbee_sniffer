options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: process
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 16.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 200.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: '-20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 192.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: data.pcap
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 304.0]
    rotation: 180
    state: enabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: capture.dat
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 168.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 192.0]
    rotation: 0
    state: true
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 328.0]
    rotation: 180
    state: true
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.045'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '128'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: '2'
    ted_gain: '1.0'
    ted_type: digital.TED_MUELLER_AND_MULLER
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 140.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom collections import deque\nfrom enum import Enum\n\
      import pmt\n\nchip = [\n    1618456172, 1309113062, 1826650030, 1724778362,\
      \ 778887287, 2061946375,\n    2007919840, 125494990,  529027475,  838370585,\
      \  320833617, 422705285,\n    1368596360, 85537272,   139563807,  2021988657\n\
      \    ];\n\nclass DecoderState(Enum):\n    PREAMBLE_SEARCH = 1\n    PREAMBLE_GET\
      \ = 2\n    SFD_GET = 3\n    PHR_GET = 4\n    PSDU_GET = 5\n    ERROR = 100\n\
      \ndebug_enabled = 0\n\ndef debug(msg, **kwargs):\n    if debug_enabled == 1:\n\
      \        print(msg, kwargs)\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Zigbee FM Decoder',   # will show up in GRC\n           \
      \ in_sig=[np.byte],\n            out_sig=[]\n        )\n        # type should\
      \ be faster, lets see\n        self.val = np.uint32(0)\n        # initial precalculations\n\
      \        for i in range(0,len(chip)):\n            chip[i] = chip[i] & 0x7FFFFFFE\n\
      \        self.state = DecoderState.PREAMBLE_SEARCH;\n        self.bits_processed\
      \ = 0\n        self.bits_to_fetch = 1\n        self.threshold = 5\n        self.chip_found\
      \ = -1\n\n        self.message_port_register_out(pmt.intern('pdu_out'))\n\n\
      \    def work(self, input_items, output_items):\n        for i in input_items[0]:\n\
      \            self.val = self.val << 1\n            self.val = self.val | i\n\
      \            self.bits_processed += 1\n            if (self.bits_processed ==\
      \ self.bits_to_fetch):\n                self.bits_processed = 0;\n         \
      \       for i in range(0,len(chip)):\n                    res = ((self.val &\
      \ 0x7FFFFFFE) ^ chip[i]).bit_count()\n                    if res < self.threshold:\n\
      \                        # chip found\n                        chip_val = i\n\
      \                        break;\n                    else:\n               \
      \         chip_val = -1\n                    # we only intrested in checking\
      \ 0 for preamble,\n                    # no need for additional chip check\n\
      \                    if self.state == DecoderState.PREAMBLE_SEARCH:\n      \
      \                  break\n\n                if self.state == DecoderState.PREAMBLE_SEARCH:\n\
      \                    if chip_val == 0:\n                        print(\"Synced\
      \ to preamble and found preamble chip\")\n                        self.bits_to_fetch\
      \ = 32\n                        self.state = DecoderState.PREAMBLE_GET\n   \
      \                     self.preamble_chips = 1;\n                elif self.state\
      \ == DecoderState.PREAMBLE_GET:\n                    debug(\"Found next preamble\
      \ chip\")\n                    if chip_val == 0:\n                        self.preamble_chips\
      \ += 1\n                        if (self.preamble_chips == 8):\n           \
      \                 debug(\"All chips found\")\n                            self.state\
      \ = DecoderState.SFD_GET\n                            self.symbol_no = 0\n \
      \                           self.data = []\n                    else:\n    \
      \                    print(\"Preamble error\")\n                        self.state\
      \ = DecoderState.ERROR\n                elif self.state == DecoderState.SFD_GET:\n\
      \                    if chip_val != -1:\n                        debug(\"found\
      \ chip {}\".format(chip_val));\n                        self.data.append(chip_val)\n\
      \                        self.symbol_no += 1;\n                        if (self.symbol_no\
      \ == 2):\n                            val = self.data[1] << 4 | self.data[0];\n\
      \                            debug(\"found SFD {}\".format(hex(val)));\n   \
      \                         if (val == 0xA7):\n                              \
      \  self.symbol_no = 0;\n                                self.data = [];\n  \
      \                              self.state = DecoderState.PHR_GET;\n        \
      \                    else:\n                                print(\"SFD val\
      \ error\");\n                                self.state = DecoderState.ERROR\n\
      \                    else:\n                        print(\"SFD error\")\n \
      \                       self.state = DecoderState.ERROR\n                elif\
      \ self.state == DecoderState.PHR_GET:\n                    if chip_val != -1:\n\
      \                        debug(\"found chip {}\".format(chip_val));\n      \
      \                  self.data.append(chip_val)\n                        self.symbol_no\
      \ += 1;\n                        if (self.symbol_no == 2):\n               \
      \             val = self.data[1] << 4 | self.data[0];\n                    \
      \        debug(\"found PHR {}\".format(hex(val)));\n                       \
      \     # symbol contains 4 bits we need to\n                            # multiply\
      \ by 2 to fetch all data\n                            self.psdu_len = val *\
      \ 2\n                            self.data = []\n                          \
      \  self.symbol_no = 0\n                            self.state = DecoderState.PSDU_GET\n\
      \                    else:\n                        print(\"PHR error\")\n \
      \                       self.state = DecoderState.ERROR\n                elif\
      \ self.state == DecoderState.PSDU_GET:\n                    if chip_val != -1:\n\
      \                        debug(\"found chip {}\".format(chip_val));\n      \
      \                  self.data.append(chip_val)\n                        self.symbol_no\
      \ += 1;\n                        if (self.symbol_no == self.psdu_len):\n   \
      \                         psdu = []\n                            for i in range(0,len(self.data),2):\n\
      \                                psdu.append(self.data[i+1] << 4 | self.data[i+0])\n\
      \                            debug(\"PSDU \", end=\"\")\n                  \
      \          print(list(map(hex, psdu)))\n                            msg = pmt.cons(pmt.PMT_NIL,\
      \ pmt.init_u8vector(len(psdu), psdu))\n                            self.message_port_pub(pmt.intern(\"\
      pdu_out\"), msg);\n                            self.data = []\n            \
      \                self.state = DecoderState.PREAMBLE_SEARCH\n               \
      \             self.bits_to_fetch = 1;\n                            self.val\
      \ = 0;\n                    else:\n                        print(\"PSDU error\"\
      )\n                        self.state = DecoderState.ERROR\n               \
      \ elif self.state == DecoderState.ERROR:\n                    self.data = []\n\
      \                    self.state = DecoderState.PREAMBLE_SEARCH\n           \
      \         self.bits_to_fetch = 1;\n\n\n\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Zigbee FM Decoder', 'blk', [], [('0', 'byte', 1)], [('pdu_out', 'message',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 328.0]
    rotation: 180
    state: enabled
- name: foo_wireshark_connector_0
  id: foo_wireshark_connector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    debug: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    tech: '195'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 312.0]
    rotation: 180
    state: enabled
- name: qtgui_time_sink_x_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"demod"'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.5'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.001'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 24.0]
    rotation: 180
    state: true

connections:
- [analog_quadrature_demod_cf_0, '0', digital_symbol_sync_xx_0, '0']
- [analog_simple_squelch_cc_0, '0', analog_quadrature_demod_cf_0, '0']
- [blocks_file_source_0, '0', blocks_throttle2_0, '0']
- [blocks_throttle2_0, '0', analog_simple_squelch_cc_0, '0']
- [digital_binary_slicer_fb_0, '0', epy_block_0, '0']
- [digital_symbol_sync_xx_0, '0', digital_binary_slicer_fb_0, '0']
- [digital_symbol_sync_xx_0, '0', qtgui_time_sink_x_1_0, '0']
- [epy_block_0, pdu_out, foo_wireshark_connector_0, in]
- [foo_wireshark_connector_0, '0', blocks_file_sink_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
